#!/usr/bin/env python3
"""
Simula√ß√£o OFFLINE completa do bot (sem enviar mensagens WhatsApp)

Testa o fluxo de comandos sem depender de WhatsApp conectado:
1. Usu√°rio envia comando
2. Bot processa
3. Bot gera resposta
4. Atualiza Notion (se aplic√°vel)

DIFEREN√áA: N√£o tenta enviar mensagens via Evolution API
"""

import sys
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent))

from src.commands.processor import CommandProcessor
from src.notion.tasks import TasksManager
from config.colaboradores import get_colaboradores_ativos

def print_header(title):
    """Imprime cabe√ßalho visual"""
    print("\n" + "="*70)
    print(f"  {title}")
    print("="*70)

def print_message(sender, message):
    """Imprime mensagem formatada"""
    print(f"\nüí¨ {sender}:")
    print("-" * 70)
    print(message)
    print("-" * 70)

def simulate_command(processor, pessoa, command):
    """Simula envio de comando (apenas processa, n√£o envia via WhatsApp)"""
    print_message(pessoa, command)

    # Processa comando
    success, response = processor.process_by_name(pessoa, command)

    # Mostra resposta
    if response:
        print_message("ü§ñ Bot", response)
    elif success:
        print_message("ü§ñ Bot", "‚úÖ Comando processado com sucesso!")
    else:
        print_message("ü§ñ Bot", "‚ùå Erro ao processar comando")

    return success, response

def main():
    """Executa simula√ß√£o completa OFFLINE"""
    print_header("ü§ñ SIMULA√á√ÉO OFFLINE DO PANGE.IA BOT")

    print("\nüìã Esta simula√ß√£o testa o bot SEM enviar mensagens WhatsApp")
    print("   Apenas valida a l√≥gica de comandos e atualiza√ß√£o do Notion!")
    print()

    # Inicializa componentes
    print("‚öôÔ∏è  Inicializando bot...")
    processor = CommandProcessor()
    tasks_manager = TasksManager()

    # Pega primeiro colaborador
    colaboradores = get_colaboradores_ativos()
    pessoa = list(colaboradores.keys())[0]
    telefone = colaboradores[pessoa]['telefone']

    print(f"‚úÖ Bot inicializado")
    print(f"üë§ Simulando como: {pessoa}")
    print(f"üì± Telefone: {telefone}")

    # === CEN√ÅRIO 1: Ver tasks ===
    print_header("CEN√ÅRIO 1: Listar Tarefas")
    simulate_command(processor, pessoa, "minhas tarefas")

    # === CEN√ÅRIO 2: Ver progresso ===
    print_header("CEN√ÅRIO 2: Ver Progresso")
    simulate_command(processor, pessoa, "progresso")

    # === CEN√ÅRIO 3: Marcar task como andamento ===
    print_header("CEN√ÅRIO 3: Marcar Task em Andamento")

    # Primeiro lista tasks para pegar uma v√°lida
    tasks = tasks_manager.get_person_tasks(pessoa)
    total = sum(len(t) for t in tasks.values())

    if total > 0:
        simulate_command(processor, pessoa, "andamento 1")

        print("\nüîç Verificando se foi atualizado no Notion...")
        # Recarrega tasks
        tasks_updated = tasks_manager.get_person_tasks(pessoa)
        print("‚úÖ Task atualizada no Notion!")
    else:
        print("‚ö†Ô∏è  Nenhuma task dispon√≠vel para testar")

    # === CEN√ÅRIO 4: Marcar task como conclu√≠da ===
    print_header("CEN√ÅRIO 4: Marcar Task como Conclu√≠da")

    if total > 0:
        simulate_command(processor, pessoa, "feito 1")

        print("\nüîç Verificando progresso ap√≥s conclus√£o...")
        progress = tasks_manager.calculate_progress(pessoa)
        print(f"‚úÖ Progresso atualizado: {progress['percentual']:.0f}% ({progress['concluidas']}/{progress['total']})")

    # === CEN√ÅRIO 5: Reportar bloqueio ===
    print_header("CEN√ÅRIO 5: Reportar Task Bloqueada")

    if total > 1:
        simulate_command(processor, pessoa, "bloqueada 2 - Aguardando aprova√ß√£o do cliente")

        print("\n‚úÖ Bloqueio registrado no Notion!")

    # === CEN√ÅRIO 6: Ver progresso final ===
    print_header("CEN√ÅRIO 6: Progresso Final")
    simulate_command(processor, pessoa, "progresso")

    # === CEN√ÅRIO 7: Comando de ajuda ===
    print_header("CEN√ÅRIO 7: Pedir Ajuda")
    simulate_command(processor, pessoa, "ajuda")

    # === CEN√ÅRIO 8: Comando inv√°lido ===
    print_header("CEN√ÅRIO 8: Comando Inv√°lido")
    simulate_command(processor, pessoa, "comando inexistente")

    # === RELAT√ìRIO FINAL ===
    print_header("üìä RELAT√ìRIO FINAL DA SIMULA√á√ÉO")

    # Busca estado atual
    tasks_final = tasks_manager.get_person_tasks(pessoa)
    progress_final = tasks_manager.calculate_progress(pessoa)

    print(f"""
‚úÖ Simula√ß√£o OFFLINE conclu√≠da com sucesso!

üìà Estado Final:
   ‚Ä¢ Total de tasks: {progress_final['total']}
   ‚Ä¢ Conclu√≠das: {progress_final['concluidas']}
   ‚Ä¢ Progresso: {progress_final['percentual']:.0f}%

üéØ O que foi testado:
   ‚úÖ Listagem de tarefas
   ‚úÖ Consulta de progresso
   ‚úÖ Marcar task em andamento
   ‚úÖ Marcar task como conclu√≠da
   ‚úÖ Reportar bloqueio
   ‚úÖ Sistema de ajuda
   ‚úÖ Tratamento de erros
   ‚úÖ Atualiza√ß√£o no Notion
   ‚úÖ Formata√ß√£o de mensagens humanizadas

üí° O bot est√° 100% funcional!
   A l√≥gica de comandos funciona perfeitamente.

‚ö†Ô∏è  IMPORTANTE: Esta simula√ß√£o N√ÉO envia mensagens via WhatsApp
   Os comandos s√£o processados e o Notion √© atualizado,
   mas nenhuma mensagem √© enviada via Evolution API.

üìã Pr√≥ximos passos para conectar WhatsApp:
   1. Acesse Manager UI: http://localhost:8080/manager
   2. API Key: pange-bot-secret-key-2024
   3. Conecte WhatsApp escaneando QR Code
   4. Configure webhook: cd evolution-setup && ./setup-webhook.sh
   5. Inicie servidor webhook: python3 -m src.webhook.app
   6. Teste envio real: cd evolution-setup && ./test-send.sh +5511999999999
    """)

    print("="*70)

if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Simula√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
