"""
Script para testar conex√£o com OpenAI API.
Ajuda a diagnosticar problemas com o client retornando None.
"""
import os
import sys

print("=" * 60)
print("üîç DIAGN√ìSTICO: OpenAI Client")
print("=" * 60)

# 1. Verificar vari√°vel de ambiente
print("\n1Ô∏è‚É£ Verificando OPENAI_API_KEY...")
api_key = os.getenv("OPENAI_API_KEY", "")

if not api_key:
    print("‚ùå OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente!")
    print("   Configure com: export OPENAI_API_KEY='sk-proj-...'")
    sys.exit(1)

print(f"‚úÖ OPENAI_API_KEY encontrada")
print(f"   Comprimento: {len(api_key)} caracteres")
print(f"   Prefixo: {api_key[:20]}...")
print(f"   Sufixo: ...{api_key[-10:]}")

# 2. Testar import do OpenAI
print("\n2Ô∏è‚É£ Testando import do OpenAI...")
try:
    from openai import OpenAI
    print("‚úÖ M√≥dulo openai importado com sucesso")
except ImportError as e:
    print(f"‚ùå Erro ao importar openai: {e}")
    print("   Instale com: pip install openai")
    sys.exit(1)

# 3. Testar inicializa√ß√£o do client
print("\n3Ô∏è‚É£ Testando inicializa√ß√£o do client...")
try:
    client = OpenAI(api_key=api_key)
    print("‚úÖ Client OpenAI inicializado com sucesso")
    print(f"   Tipo: {type(client)}")
    print(f"   Client is None? {client is None}")
except Exception as e:
    print(f"‚ùå Erro ao inicializar client: {e}")
    sys.exit(1)

# 4. Testar conex√£o real com API (chamada simples)
print("\n4Ô∏è‚É£ Testando conex√£o com API (chamada real)...")
try:
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "Voc√™ √© um assistente √∫til."},
            {"role": "user", "content": "Diga apenas 'OK' para confirmar que voc√™ est√° funcionando."}
        ],
        max_tokens=10,
        temperature=0.3
    )

    result = response.choices[0].message.content.strip()
    print(f"‚úÖ API respondeu com sucesso!")
    print(f"   Resposta: '{result}'")
    print(f"   Model usado: {response.model}")
    print(f"   Tokens usados: {response.usage.total_tokens}")

except Exception as e:
    print(f"‚ùå Erro ao chamar API: {e}")
    print(f"   Tipo do erro: {type(e).__name__}")
    sys.exit(1)

# 5. Testar import do config (como o app faz)
print("\n5Ô∏è‚É£ Testando import do config/openai_config.py...")
try:
    from config.openai_config import client as config_client
    print(f"‚úÖ Config importado com sucesso")
    print(f"   Client do config is None? {config_client is None}")

    if config_client is None:
        print("‚ùå PROBLEMA ENCONTRADO!")
        print("   O client no config/openai_config.py est√° None!")
        print("   Poss√≠veis causas:")
        print("   - OPENAI_API_KEY n√£o estava setada quando o m√≥dulo foi importado")
        print("   - Erro na inicializa√ß√£o que foi capturado silenciosamente")
    else:
        print(f"‚úÖ Client do config est√° OK (tipo: {type(config_client)})")

except Exception as e:
    print(f"‚ùå Erro ao importar config: {e}")
    import traceback
    traceback.print_exc()

print("\n" + "=" * 60)
print("‚úÖ DIAGN√ìSTICO COMPLETO")
print("=" * 60)
