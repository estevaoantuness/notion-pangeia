"""
Detector de Burnout - Burnout Detection System.

Sistema proativo que monitora sinais de esgotamento mental
e oferece suporte psicol√≥gico preventivo.
"""

import logging
from typing import Optional, Tuple
from datetime import datetime, timedelta

from src.psychology.engine import PsychologicalEngine, RiskLevel
from src.people.analytics import PeopleAnalytics
from src.psychology.communicator import EmpatheticCommunicator

logger = logging.getLogger(__name__)


class BurnoutDetector:
    """Detecta e previne burnout atrav√©s de monitoramento cont√≠nuo."""

    def __init__(self):
        """Inicializa o detector de burnout."""
        self.psych_engine = PsychologicalEngine()
        self.analytics = PeopleAnalytics()
        self.communicator = EmpatheticCommunicator()
        logger.info("BurnoutDetector inicializado")

    def check_and_intervene(self, person_name: str) -> Optional[str]:
        """
        Verifica risco de burnout e oferece interven√ß√£o se necess√°rio.

        Args:
            person_name: Nome da pessoa

        Returns:
            Mensagem de interven√ß√£o ou None
        """
        try:
            # Analisa m√©tricas psicol√≥gicas
            metrics = self.psych_engine.analyze_user(person_name)

            if not metrics:
                return None

            # Define mensagens por n√≠vel de risco
            interventions = {
                RiskLevel.CRITICAL: (
                    "üö® *ATEN√á√ÉO URGENTE* üö®\n\n"
                    f"{person_name}, voc√™ est√° em risco cr√≠tico de esgotamento.\n\n"
                    "Vamos fazer uma pausa AGORA:\n"
                    "‚Ä¢ Desligue por 30 minutos\n"
                    "‚Ä¢ Respire fundo 5 vezes\n"
                    "‚Ä¢ Beba √°gua\n"
                    "‚Ä¢ Estique o corpo\n\n"
                    "Voc√™ √© mais importante que qualquer tarefa. üíô"
                ),
                RiskLevel.HIGH: (
                    "‚ö†Ô∏è Voc√™ est√° sobrecarregado\n\n"
                    "Percebi que tem muita coisa acontecendo.\n"
                    "Vamos priorizar APENAS o essencial hoje?\n\n"
                    "Foco em 3 tarefas m√°ximo.\n"
                    "O resto pode esperar. üåü"
                ),
                RiskLevel.MEDIUM: (
                    "üí≠ Dica de bem-estar\n\n"
                    "Voc√™ est√° indo bem, mas vejo que est√° um pouco acelerado.\n"
                    "Que tal tirar 5 minutos para voc√™ antes de continuar?"
                ),
            }

            risk_level = metrics.burnout_risk

            if risk_level in [RiskLevel.CRITICAL, RiskLevel.HIGH, RiskLevel.MEDIUM]:
                message = interventions.get(risk_level)
                if message:
                    logger.warning(f"Interven√ß√£o de burnout para {person_name}: {risk_level.value}")
                    return message

            return None

        except Exception as e:
            logger.error(f"Erro ao verificar burnout: {e}")
            return None

    def get_recovery_plan(self, person_name: str) -> str:
        """
        Gera plano de recupera√ß√£o para pessoa em risco.

        Args:
            person_name: Nome da pessoa

        Returns:
            Plano de recupera√ß√£o personalizado
        """
        try:
            profile = self.analytics.get_or_create_profile(person_name)

            recovery_plan = f"""
üìã *Plano de Recupera√ß√£o para {person_name}*

**Semana 1: Restaura√ß√£o**
‚Ä¢ Durma 8h por noite
‚Ä¢ 30min movimento f√≠sico di√°rio
‚Ä¢ Uma refei√ß√£o sem pressa di√°ria

**Semana 2: Reorganiza√ß√£o**
‚Ä¢ Revise prioridades com perspectiva fresca
‚Ä¢ Delegue ou negocie prazos
‚Ä¢ Estabele√ßa limites de hor√°rio

**Semana 3: Reengajamento**
‚Ä¢ Volte com carga gradual
‚Ä¢ Celebre pequenas vit√≥rias diariamente
‚Ä¢ Mantenha auto-compaix√£o

üåü Voc√™ vai se recuperar. Estou aqui te apoiando.
            """
            return recovery_plan

        except Exception as e:
            logger.error(f"Erro ao gerar plano de recupera√ß√£o: {e}")
            return "Vamos conversar sobre como apoi√°-lo melhor. ü§ù"
