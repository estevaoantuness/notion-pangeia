"""
Conversational Agent - Agente 100% Conversacional baseado em GPT-4o-mini.

Substitui o sistema r√≠gido de comandos por processamento de linguagem natural,
entendendo varia√ß√µes ilimitadas e gerando respostas humanizadas.
"""

import logging
import json
import os
from typing import Optional, Tuple, Dict, Any
from config.openai_config import client
from src.memory.conversation_history import get_conversation_history
from src.notion.tasks import TasksManager
from src.notion.task_creator import TaskCreator

logger = logging.getLogger(__name__)


class ConversationalAgent:
    """
    Agente conversacional 100% baseado em GPT-4o-mini.

    Processa TODAS as mensagens usando linguagem natural, sem comandos fixos.
    Suporta varia√ß√µes ilimitadas como:
    - "consegue me ajudar" ‚Üí mostra ajuda
    - "me mostra o que falta" ‚Üí lista tasks
    - "terminei aquela de estudar" ‚Üí marca task como Done
    """

    SYSTEM_PROMPT = """Voc√™ √© um assistente pessoal de produtividade que ajuda a gerenciar tarefas di√°rias.

TOM E ESTILO:
- Natural e amig√°vel (como um amigo ajudando)
- Direto ao ponto (1-2 linhas no m√°ximo)
- Focado em A√á√ÉO (fazer tasks, marcar progresso)
- Zero filosofia ou reflex√µes profundas

TAMANHO DE RESPOSTA:
- Padr√£o: 1 linha
- Lista de tasks: pode ter m√∫ltiplas linhas (formatada)
- Progresso/resumo: 2-3 linhas m√°ximo

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

FUNCIONALIDADES DISPON√çVEIS:

1. LISTAR TAREFAS
   Quando o usu√°rio pedir para ver tasks, lista pendentes, status, etc.

   Varia√ß√µes aceitas:
   - "minhas tasks", "o que tenho pra fazer", "mostra minhas coisas"
   - "consegue me ajudar a ver o que falta", "me lista o que tem"
   - "quais s√£o minhas tarefas", "mostra tudo", "o que tenho hoje"

   Action: list_tasks
   Params: {}

2. MARCAR TAREFA COMO CONCLU√çDA
   Quando o usu√°rio disser que terminou/completou uma task.

   Varia√ß√µes aceitas:
   - "terminei a 2", "feito n√∫mero 5", "completei task 3"
   - "task de estudar t√° pronta", "finalizei aquela reuni√£o"
   - "3 foi feita", "pronto task 1"

   Action: complete_task
   Params: {task_id: n√∫mero da task (OBRIGAT√ìRIO)}

   IMPORTANTE: Se n√£o conseguir identificar o n√∫mero, pergunte qual task foi.

3. MARCAR TAREFA EM ANDAMENTO
   Quando o usu√°rio disser que come√ßou/vai come√ßar uma task.

   Varia√ß√µes aceitas:
   - "vou come√ßar a 4", "t√¥ fazendo a segunda", "comecei task 3"
   - "iniciei task de estudar", "andamento 2", "come√ßando 5"

   Action: start_task
   Params: {task_id: n√∫mero da task (OBRIGAT√ìRIO)}

4. MARCAR TAREFA BLOQUEADA
   Quando a task est√° impedida/travada/bloqueada.

   Varia√ß√µes aceitas:
   - "travou a 3 por falta de aprova√ß√£o"
   - "task 2 t√° impedida - aguardando resposta"
   - "bloqueada 4: sem acesso ao sistema"
   - "n√£o consigo 5, preciso de fulano"

   Action: block_task
   Params: {
       task_id: n√∫mero da task (OBRIGAT√ìRIO),
       reason: string com o motivo do bloqueio
   }

   IMPORTANTE: Se n√£o tiver motivo, pergunte "Por qu√™?" ou "Qual o problema?"

5. CRIAR NOVA TAREFA
   Quando o usu√°rio quiser adicionar uma nova task.

   Varia√ß√µes aceitas:
   - "cria uma task pra estudar Python"
   - "quero adicionar fazer relat√≥rio"
   - "preciso fazer reuni√£o com time"
   - "nova tarefa: comprar caf√©"

   Action: create_task
   Params: {title: string com o t√≠tulo da task}

   IMPORTANTE: Extraia o t√≠tulo da task de forma natural. Se n√£o tiver t√≠tulo claro, pergunte.

6. VER PROGRESSO/STATUS
   Quando o usu√°rio perguntar como est√° indo, quanto falta, resumo do dia.

   Varia√ß√µes aceitas:
   - "como estou", "quanto falta", "me d√° um resumo"
   - "t√° indo bem?", "andamento do dia", "como t√°"
   - "progresso", "status", "como est√£o as tasks"

   Action: show_progress
   Params: {}

7. AJUDA / O QUE VOC√ä FAZ
   Quando o usu√°rio pedir ajuda ou quiser saber suas capacidades.

   Varia√ß√µes aceitas:
   - "consegue me ajudar", "o que voc√™ faz"
   - "quais comandos", "me ensina", "como usar"
   - "ajuda", "help", "?", "me explica"

   Action: show_help
   Params: {}

8. SAUDA√á√ïES E SMALLTALK
   Quando o usu√°rio cumprimentar ou fazer conversa fiada.

   Varia√ß√µes: "oi", "tudo bem", "como vai", "bora", "e a√≠"

   Action: greeting
   Params: {}

   RESPOSTA: Seja amig√°vel (1 linha) + sugira ver tasks

9. DESPEDIDAS
   Quando o usu√°rio se despedir.

   Varia√ß√µes: "tchau", "at√© logo", "valeu", "falou"

   Action: goodbye
   Params: {}

10. AGRADECIMENTOS
    Quando o usu√°rio agradecer.

    Varia√ß√µes: "obrigado", "valeu", "thanks"

    Action: thanks
    Params: {}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

FORMATO DE RESPOSTA (OBRIGAT√ìRIO):

Voc√™ DEVE retornar sempre um JSON v√°lido neste formato:

{
  "action": "list_tasks|complete_task|start_task|block_task|create_task|show_progress|show_help|greeting|goodbye|thanks|unknown",
  "params": {},
  "response": "Resposta humanizada em 1-2 linhas m√°ximo"
}

EXEMPLOS DE CONVERSAS:

Usu√°rio: "consegue me ajudar"
Resposta JSON:
{
  "action": "show_help",
  "params": {},
  "response": "Claro! Posso mostrar suas tasks, marcar como feito, criar novas... O que precisa?"
}

Usu√°rio: "me mostra o que falta"
Resposta JSON:
{
  "action": "list_tasks",
  "params": {},
  "response": "Vou buscar suas tasks!"
}

Usu√°rio: "terminei a 2"
Resposta JSON:
{
  "action": "complete_task",
  "params": {"task_id": 2},
  "response": "Boa! Task 2 completa üëç"
}

Usu√°rio: "vou come√ßar a estudar"
Resposta JSON:
{
  "action": "start_task",
  "params": {"task_id": null},
  "response": "Qual task voc√™ vai come√ßar? Me passa o n√∫mero"
}

Usu√°rio: "travou a 3 por falta de aprova√ß√£o"
Resposta JSON:
{
  "action": "block_task",
  "params": {"task_id": 3, "reason": "falta de aprova√ß√£o"},
  "response": "Entendi! Task 3 marcada como bloqueada (falta de aprova√ß√£o)"
}

Usu√°rio: "cria task pra comprar caf√©"
Resposta JSON:
{
  "action": "create_task",
  "params": {"title": "comprar caf√©"},
  "response": "Task 'comprar caf√©' criada! üéØ"
}

Usu√°rio: "como estou"
Resposta JSON:
{
  "action": "show_progress",
  "params": {},
  "response": "Vou ver seu progresso!"
}

Usu√°rio: "oi"
Resposta JSON:
{
  "action": "greeting",
  "params": {},
  "response": "E a√≠! Bora ver suas tasks?"
}

Usu√°rio: "obrigado"
Resposta JSON:
{
  "action": "thanks",
  "params": {},
  "response": "Tranquilo! üòä"
}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

REGRAS IMPORTANTES:

1. SEMPRE retorne JSON v√°lido (n√£o texto comum)
2. Se n√£o entender, use action: "unknown" e pe√ßa esclarecimento
3. Seja conciso: 1 linha √© o ideal, 2 linhas √© o m√°ximo (exceto listas)
4. Extraia n√∫meros de tasks com precis√£o (task_id √© cr√≠tico)
5. Se faltar informa√ß√£o obrigat√≥ria (task_id, title, reason), PERGUNTE
6. Seja natural e humanizado, n√£o rob√≥tico
7. Foque em A√á√ÉO, n√£o em conversa filos√≥fica
8. Use emojis com modera√ß√£o (1 por resposta no m√°ximo)

LEMBRE-SE: Seu objetivo √© ajudar o usu√°rio a completar tasks de forma r√°pida e eficiente!
"""

    def __init__(self):
        """Inicializa o agente conversacional."""
        self.conversation_history = get_conversation_history()
        self.tasks_manager = TasksManager()
        self.task_creator = TaskCreator()
        logger.info("ConversationalAgent inicializado (GPT-4o-mini)")

    def process(
        self,
        user_name: str,
        message: str
    ) -> Tuple[bool, str]:
        """
        Processa mensagem usando GPT-4o-mini para entender inten√ß√£o.

        Args:
            user_name: Nome do usu√°rio
            message: Mensagem recebida

        Returns:
            Tuple (sucesso, resposta)
        """
        logger.info(f"ü§ñ ConversationalAgent.process() - user: '{user_name}', msg: '{message[:50]}'")

        try:
            # Verificar API key
            if not os.getenv('OPENAI_API_KEY'):
                logger.error("‚ùå FATAL: OPENAI_API_KEY n√£o configurada!")
                return False, "Erro de configura√ß√£o. Contate o suporte."

            # Adicionar mensagem do usu√°rio ao hist√≥rico
            self.conversation_history.add_message(
                user_id=user_name,
                message=message,
                role="user"
            )

            # Obter contexto das √∫ltimas 10 mensagens
            context = self.conversation_history.get_context_for_llm(
                user_id=user_name,
                max_messages=9  # 9 anteriores + 1 atual = 10
            )

            # Adicionar mensagem atual
            context.append({
                "role": "user",
                "content": message
            })

            logger.info(f"üìù Processando com {len(context)} mensagens de contexto")

            # Chamar GPT-4o-mini
            logger.info("üîÑ Chamando OpenAI API (gpt-4o-mini)...")
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": self.SYSTEM_PROMPT},
                    *context
                ],
                temperature=0.3,  # Baixa para ser consistente
                max_tokens=500,
                response_format={"type": "json_object"},
                timeout=20.0
            )

            # Parsear resposta
            result_text = response.choices[0].message.content.strip()
            logger.info(f"‚úÖ GPT Response (raw): {result_text[:200]}")
            result = json.loads(result_text)

            action = result.get("action", "unknown")
            params = result.get("params", {})
            response_text = result.get("response", "")

            logger.info(f"üìä Action: {action}, Params: {params}")

            # Executar a√ß√£o
            success, final_response = self._execute_action(
                user_name=user_name,
                action=action,
                params=params,
                gpt_response=response_text
            )

            # Adicionar resposta ao hist√≥rico
            self.conversation_history.add_message(
                user_id=user_name,
                message=final_response,
                role="assistant",
                metadata={"action": action, "params": params}
            )

            return success, final_response

        except json.JSONDecodeError as e:
            logger.error(f"‚ùå JSON DECODE ERROR: {e}")
            logger.error(f"Resposta do GPT (n√£o √© JSON v√°lido): {result_text}")
            return False, "N√£o entendi direito. Pode reformular?"

        except NameError as e:
            logger.error(f"‚ùå NAME ERROR (vari√°vel n√£o definida): {e}", exc_info=True)
            return False, "Ops, erro de configura√ß√£o. Tenta de novo?"

        except AttributeError as e:
            logger.error(f"‚ùå ATTRIBUTE ERROR (m√©todo/atributo n√£o existe): {e}", exc_info=True)
            return False, "Ops, erro interno. Tenta de novo?"

        except Exception as e:
            logger.error(f"‚ùå ERRO GEN√âRICO NO CONVERSATIONAL AGENT")
            logger.error(f"Tipo do erro: {type(e).__name__}")
            logger.error(f"Mensagem: {str(e)}")
            logger.error(f"User: {user_name}, Message: {message[:100]}")
            import traceback
            traceback.print_exc()
            return False, "Ops, tive um problema t√©cnico. Tenta de novo?"

    def _execute_action(
        self,
        user_name: str,
        action: str,
        params: Dict[str, Any],
        gpt_response: str
    ) -> Tuple[bool, str]:
        """
        Executa a√ß√£o detectada pelo GPT.

        Args:
            user_name: Nome do usu√°rio
            action: A√ß√£o detectada
            params: Par√¢metros extra√≠dos
            gpt_response: Resposta gerada pelo GPT

        Returns:
            Tuple (sucesso, resposta_final)
        """
        logger.info(f"üé¨ Executando action '{action}' com params: {params}")

        try:
            # LIST TASKS
            if action == "list_tasks":
                tasks = self.tasks_manager.get_active_tasks(user_name)
                if not tasks:
                    return True, "Voc√™ n√£o tem tasks pendentes! üéâ"

                # Formatar lista de tasks
                task_list = self._format_task_list(tasks)
                return True, f"Suas tasks:\n\n{task_list}"

            # COMPLETE TASK
            elif action == "complete_task":
                task_id = params.get("task_id")
                if not task_id:
                    return True, gpt_response  # GPT j√° pediu o n√∫mero

                # Marcar como Done
                success = self.tasks_manager.update_task_status(
                    task_id=task_id,
                    new_status="Done"
                )
                if success:
                    return True, gpt_response or f"Boa! Task {task_id} completa üëç"
                else:
                    return False, f"N√£o encontrei a task {task_id}. Quer ver a lista?"

            # START TASK
            elif action == "start_task":
                task_id = params.get("task_id")
                if not task_id:
                    return True, gpt_response  # GPT j√° pediu o n√∫mero

                success = self.tasks_manager.update_task_status(
                    task_id=task_id,
                    new_status="In Progress"
                )
                if success:
                    return True, gpt_response or f"Boa! Task {task_id} em andamento üöÄ"
                else:
                    return False, f"N√£o encontrei a task {task_id}. Quer ver a lista?"

            # BLOCK TASK
            elif action == "block_task":
                task_id = params.get("task_id")
                reason = params.get("reason", "")

                if not task_id:
                    return True, gpt_response

                if not reason:
                    return True, f"Task {task_id} t√° bloqueada por qu√™?"

                # Marcar como Blocked
                success = self.tasks_manager.update_task_status(
                    task_id=task_id,
                    new_status="Blocked",
                    block_reason=reason
                )
                if success:
                    return True, gpt_response or f"Task {task_id} marcada como bloqueada ({reason})"
                else:
                    return False, f"N√£o encontrei a task {task_id}"

            # CREATE TASK
            elif action == "create_task":
                title = params.get("title", "").strip()
                if not title:
                    return True, gpt_response or "Qual o t√≠tulo da nova task?"

                # Criar task
                success = self.task_creator.create_task(
                    title=title,
                    assignee=user_name
                )
                if success:
                    return True, gpt_response or f"Task '{title}' criada! üéØ"
                else:
                    return False, "Erro ao criar task. Tenta de novo?"

            # SHOW PROGRESS
            elif action == "show_progress":
                tasks = self.tasks_manager.get_active_tasks(user_name)
                total = len(tasks)
                done = sum(1 for t in tasks if t.get("status") == "Done")
                in_progress = sum(1 for t in tasks if t.get("status") == "In Progress")

                if total == 0:
                    return True, "Sem tasks no momento! üéâ"

                percentage = int((done / total) * 100)
                return True, f"{percentage}% completo! {done}/{total} tasks feitas ({in_progress} em andamento) üöÄ"

            # SHOW HELP
            elif action == "show_help":
                help_text = """Posso te ajudar com:

‚Ä¢ Ver suas tasks: "mostra minhas tasks", "o que falta"
‚Ä¢ Marcar como feito: "terminei a 2", "task 3 pronta"
‚Ä¢ Iniciar task: "vou come√ßar a 4", "fazendo 1"
‚Ä¢ Bloquear: "travou a 5 - sem acesso"
‚Ä¢ Criar nova: "cria task pra estudar Python"
‚Ä¢ Ver progresso: "como estou", "quanto falta"

S√≥ conversar natural comigo! üòä"""
                return True, help_text

            # GREETING
            elif action == "greeting":
                return True, gpt_response or "E a√≠! Bora ver suas tasks?"

            # GOODBYE
            elif action == "goodbye":
                return True, gpt_response or "At√© logo! Qualquer coisa chama üëã"

            # THANKS
            elif action == "thanks":
                return True, gpt_response or "Tranquilo! üòä"

            # UNKNOWN
            else:
                return True, gpt_response or "N√£o entendi. Tenta: 'minhas tasks', 'progresso', 'ajuda'"

        except Exception as e:
            logger.error(f"‚ùå Erro ao executar action '{action}': {e}", exc_info=True)
            return False, "Erro ao executar a√ß√£o. Tenta de novo?"

    def _format_task_list(self, tasks: list) -> str:
        """
        Formata lista de tasks de forma humanizada.

        Args:
            tasks: Lista de tasks

        Returns:
            String formatada
        """
        formatted = []
        for i, task in enumerate(tasks[:10], 1):  # M√°ximo 10 tasks
            title = task.get("title", "Sem t√≠tulo")
            status = task.get("status", "Not Started")

            # Emoji por status
            emoji = "‚è∏Ô∏è" if status == "Not Started" else "üîÑ" if status == "In Progress" else "üö´" if status == "Blocked" else "‚úÖ"

            formatted.append(f"{i}. {emoji} {title}")

        return "\n".join(formatted)


# Inst√¢ncia global
_conversational_agent = None


def get_conversational_agent() -> ConversationalAgent:
    """
    Retorna inst√¢ncia global do ConversationalAgent.

    Returns:
        ConversationalAgent singleton
    """
    global _conversational_agent
    if _conversational_agent is None:
        _conversational_agent = ConversationalAgent()
    return _conversational_agent
