#!/usr/bin/env python3
"""
Teste Completo de CRUD de Tasks.

Demonstra:
- ‚úÖ Criar tasks com assignee
- ‚úÖ Editar propriedades (status, prioridade, etc)
- ‚úÖ Reatribuir respons√°veis
- ‚úÖ Completar tasks
- ‚úÖ Criar subtasks
"""

import sys
import os
from datetime import date, timedelta

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from src.notion.task_creator import TaskCreator
from src.notion.tasks import TasksManager


def print_section(title):
    """Imprime se√ß√£o bonita."""
    print(f"\n{'='*80}")
    print(f"üìã {title}")
    print('='*80)


def main():
    print("="*80)
    print("üß™ TESTE COMPLETO DE CRUD - TASKS DO NOTION")
    print("="*80)
    print()

    # Inicializa
    print("üîß Inicializando TaskCreator e TasksManager...")
    task_creator = TaskCreator()
    tasks_manager = TasksManager()
    print("‚úÖ Pronto!\n")

    # ========================================================================
    # TESTE 1: CRIAR TASK COM ASSIGNEE
    # ========================================================================
    print_section("TESTE 1: CRIAR TASK COM ASSIGNEE")

    print("Criando task 'Teste de Integra√ß√£o API' para Saraiva...")

    task_id = task_creator.create_task(
        title="[TESTE] Integra√ß√£o API do WhatsApp",
        assignee="Saraiva",
        description="Task criada automaticamente pelo teste CRUD.\n\nObjetivo: Validar integra√ß√£o com Evolution API.",
        due_date=date.today() + timedelta(days=7),
        priority="High"
    )

    # task_id √© um dict com v√°rias informa√ß√µes
    if task_id and task_id.get("created"):
        actual_id = task_id.get("id")
        print(f"‚úÖ Task criada com sucesso!")
        print(f"   ID: {actual_id}")
        print(f"   Respons√°vel: Saraiva")
        print(f"   Prazo: {(date.today() + timedelta(days=7)).strftime('%d/%m/%Y')}")

        # Usar ID real para pr√≥ximos testes
        task_id = actual_id
    else:
        print("‚ùå Erro ao criar task")
        return

    # ========================================================================
    # TESTE 2: BUSCAR E MOSTRAR A TASK CRIADA
    # ========================================================================
    print_section("TESTE 2: BUSCAR TASK CRIADA")

    print("Buscando tasks do Saraiva...")
    saraiva_tasks = tasks_manager.get_person_tasks("Saraiva")

    # Encontra nossa task de teste
    test_task = None
    for task_data in saraiva_tasks:
        # task_data pode ser dict ou string, vamos verificar
        if isinstance(task_data, dict):
            title = task_data.get("title", "")
        elif isinstance(task_data, str):
            # Se for string, √© o pr√≥prio t√≠tulo
            title = task_data
            task_data = {"title": title}
        else:
            continue

        if "[TESTE]" in title:
            test_task = task_data
            break

    if test_task:
        print("‚úÖ Task encontrada:")
        print(f"   T√≠tulo: {test_task.get('title', test_task if isinstance(test_task, str) else 'N/A')}")
        if isinstance(test_task, dict):
            print(f"   Status: {test_task.get('status', 'N/A')}")
            assignees = test_task.get('assignees', [])
            if assignees:
                print(f"   Respons√°vel: {', '.join(assignees)}")
    else:
        print("‚ö†Ô∏è  Task de teste n√£o encontrada (pode demorar alguns segundos para sincronizar)")

    # ========================================================================
    # TESTE 3: ATUALIZAR STATUS DA TASK
    # ========================================================================
    print_section("TESTE 3: ATUALIZAR STATUS")

    print("Mudando status de 'A Fazer' ‚Üí 'Em Andamento'...")

    success = task_creator.update_task_status(task_id, "Em Andamento")

    if success:
        print("‚úÖ Status atualizado com sucesso!")
        print("   Novo status: Em Andamento")
    else:
        print("‚ùå Erro ao atualizar status")

    # ========================================================================
    # TESTE 4: REATRIBUIR RESPONS√ÅVEL
    # ========================================================================
    print_section("TESTE 4: REATRIBUIR RESPONS√ÅVEL")

    print("Reatribuindo de 'Saraiva' ‚Üí 'Julio'...")

    try:
        result = task_creator.reassign_task(
            page_id=task_id,
            new_assignee="Julio"
        )

        if result.get("updated"):
            print("‚úÖ Respons√°vel reatribu√≠do!")
            print("   Novo respons√°vel: Julio")
        else:
            print("‚ùå Erro ao reatribuir")
    except Exception as e:
        print(f"‚ùå Erro: {e}")

    # ========================================================================
    # TESTE 5: CRIAR SUBTASKS
    # ========================================================================
    print_section("TESTE 5: CRIAR SUBTASKS")

    print("Criando 3 subtasks...")

    subtasks = [
        "Configurar credenciais da Evolution API",
        "Implementar endpoint de envio",
        "Testar envio de mensagem"
    ]

    subtask_ids = task_creator.create_subtasks(
        parent_task_id=task_id,
        subtasks=subtasks,
        assignee="Julio"
    )

    if subtask_ids:
        print(f"‚úÖ {len(subtask_ids)} subtasks criadas com sucesso!")
        for i, subtask_title in enumerate(subtasks, 1):
            print(f"   {i}. {subtask_title}")
    else:
        print("‚ùå Erro ao criar subtasks")

    # ========================================================================
    # TESTE 6: COMPLETAR TASK
    # ========================================================================
    print_section("TESTE 6: COMPLETAR TASK")

    print("Marcando task como conclu√≠da...")

    success = task_creator.complete_task(task_id)

    if success:
        print("‚úÖ Task marcada como conclu√≠da!")
        print("   Status final: Conclu√≠da ‚úì")
    else:
        print("‚ùå Erro ao completar task")

    # ========================================================================
    # RESUMO FINAL
    # ========================================================================
    print()
    print("="*80)
    print("üìä RESUMO DOS TESTES")
    print("="*80)
    print()
    print("‚úÖ FUNCIONALIDADES TESTADAS:")
    print("   1. ‚úì Criar task com assignee")
    print("   2. ‚úì Buscar tasks de uma pessoa")
    print("   3. ‚úì Atualizar status da task")
    print("   4. ‚úì Reatribuir respons√°vel")
    print("   5. ‚úì Criar subtasks")
    print("   6. ‚úì Completar task")
    print()
    print("üí° TODAS AS FUNCIONALIDADES DISPON√çVEIS:")
    print("   ‚Ä¢ create_task() - Criar nova task com assignee, prioridade, prazo")
    print("   ‚Ä¢ update_task_status() - Mudar status (A Fazer, Em Andamento, Conclu√≠da)")
    print("   ‚Ä¢ reassign_task() - Reatribuir respons√°vel")
    print("   ‚Ä¢ update_priority() - Mudar prioridade (Low, Medium, High, Urgent)")
    print("   ‚Ä¢ update_due_date() - Alterar ou remover data de vencimento")
    print("   ‚Ä¢ complete_task() - Marcar como conclu√≠da")
    print("   ‚Ä¢ start_task() - Marcar como 'Em Andamento'")
    print("   ‚Ä¢ create_subtasks() - Criar m√∫ltiplas subtasks automaticamente")
    print("   ‚Ä¢ find_task_by_title() - Buscar task por t√≠tulo (fuzzy match)")
    print("   ‚Ä¢ update_task() - M√©todo gen√©rico para atualizar qualquer propriedade")
    print()
    print("ü§ñ INTEGRA√á√ÉO COM CONVERSATIONAL AGENT:")
    print("   ‚Ä¢ Bot pode criar tasks quando usu√°rio pedir")
    print("   ‚Ä¢ Bot pode atualizar status durante conversa")
    print("   ‚Ä¢ Bot pode sugerir e criar subtasks automaticamente")
    print("   ‚Ä¢ Bot pode reatribuir tasks quando detectar sobrecarga")
    print()
    print("="*80)
    print("‚úÖ TESTE COMPLETO!")
    print("="*80)
    print()
    print(f"üîó Task de teste criada: {task_id}")
    print("   (voc√™ pode ver ela no Notion agora)")
    print()


if __name__ == "__main__":
    main()
