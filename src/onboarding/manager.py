"""
Gerenciador de onboarding para novos usu√°rios.

Este m√≥dulo controla o fluxo de onboarding, perguntando se o usu√°rio
quer tutorial completo ou explica√ß√£o r√°pida.

PERSIST√äNCIA: Agora usa Notion para armazenar estado, garantindo que:
- Bot lembra conversas anteriores
- N√£o repete onboarding ap√≥s restart
- Rastreia √∫ltima intera√ß√£o de cada usu√°rio
"""

import logging
from typing import Optional, Tuple
from datetime import datetime

logger = logging.getLogger(__name__)

# Estado de onboarding em mem√≥ria (apenas para sess√£o atual)
# IMPORTANTE: _onboarding_complete n√£o √© mais usado! Agora usa Notion
_onboarding_state = {}
_onboarding_complete = set()  # Deprecated - mantido por compatibilidade


class OnboardingManager:
    """
    Gerencia o processo de onboarding de novos usu√°rios.

    Controla o fluxo de tutorial inicial para novos usu√°rios.
    """

    # Sin√¥nimos de SIM (EXPANDIDO - aceita 's', n√∫meros, emojis)
    YES_SYNONYMS = [
        # Varia√ß√µes de "sim"
        'sim', 's', 'si', 'ss', 'sim!', 'sim.', 'sim,',
        # Confirma√ß√µes casuais
        'quero', 'ok', 'okay', 'pode', 'pode ser',
        'claro', 'com certeza', 'certeza', 'certo',
        'dale', 'bora', 'vamos', 'manda', 'vai',
        'aceito', 'beleza', 'blz', 'show', 'top',
        # Ingl√™s
        'yes', 'y', 'yep', 'yeah', 'sure',
        # N√∫meros (1 = sim)
        '1',
        # Emojis
        'üëç', '‚úÖ', '‚úì', '‚òëÔ∏è'
    ]

    # Sin√¥nimos de N√ÉO (EXPANDIDO - aceita 'n', n√∫meros, emojis)
    NO_SYNONYMS = [
        # Varia√ß√µes de "n√£o"
        'nao', 'n√£o', 'n', 'nn', 'nope',
        'n√£o quero', 'nao quero',
        # Recusas casuais
        'depois', 'agora n√£o', 'agora nao',
        'pular', 'skip', 'talvez depois', 'mais tarde',
        'deixa', 'deixa pra la', 'deixa pra l√°',
        # Nega√ß√µes
        'neg', 'negativo', 'nada',
        # N√∫meros (2 = n√£o)
        '2',
        # Emojis
        'üëé', '‚ùå', '‚úó', '‚òí'
    ]

    # Sin√¥nimos para tutorial completo
    FULL_SYNONYMS = [
        'completo', 'detalhado', 'tudo', 'full',
        'tutorial completo', 'explicacao completa'
    ]

    # Sin√¥nimos para tutorial b√°sico
    BASIC_SYNONYMS = [
        'basico', 'b√°sico', 'resumo', 'rapido', 'r√°pido',
        'quick', 'simples', 's√≥ o b√°sico', 'so o basico'
    ]

    def __init__(self):
        """Inicializa o gerenciador de onboarding com persist√™ncia."""
        # Importa√ß√£o lazy para evitar ciclo
        from src.onboarding.persistence import get_persistence
        self.persistence = get_persistence()
        logger.info(f"OnboardingManager inicializado (persist√™ncia: {self.persistence.is_enabled()})")

    @staticmethod
    def normalize_text(text: str) -> str:
        """
        Normaliza texto para compara√ß√£o (aceita emojis, n√∫meros, pontua√ß√£o).

        IMPORTANTE: Preserva emojis e n√∫meros para matching!
        Remove apenas pontua√ß√£o comum (. ! ? ,) mas mant√©m s√≠mbolos especiais.

        Args:
            text: Texto a normalizar

        Returns:
            Texto normalizado (lowercase, sem acentos, sem pontua√ß√£o comum)
        """
        import unicodedata

        # Lowercase
        text = text.lower().strip()

        # Remove acentos (mas preserva outros caracteres unicode como emojis)
        normalized = []
        for c in unicodedata.normalize('NFD', text):
            # Remove apenas combining marks (acentos)
            if unicodedata.category(c) != 'Mn':
                normalized.append(c)
        text = ''.join(normalized)

        # Remove pontua√ß√£o comum (mas preserva emojis e s√≠mbolos especiais)
        # Remove: . ! ? , ; : - " ' ( )
        # Preserva: n√∫meros, letras, espa√ßos, emojis (‚úÖ ‚úì etc)
        import re
        text = re.sub(r'[.!?,;:\-"\'()]', '', text)

        # Remove espa√ßos extras
        text = ' '.join(text.split())

        return text

    def is_first_time_user(self, person_name: str) -> bool:
        """
        Verifica se √© primeira intera√ß√£o do usu√°rio.

        IMPORTANTE: Agora usa persist√™ncia do Notion!
        - Verifica se usu√°rio j√° completou onboarding
        - Funciona mesmo ap√≥s reinicializa√ß√£o do bot
        - Atualiza √∫ltima intera√ß√£o automaticamente

        Args:
            person_name: Nome do colaborador

        Returns:
            True se for primeira vez, False caso contr√°rio
        """
        # Usa persist√™ncia do Notion (se habilitada)
        if self.persistence.is_enabled():
            has_completed = self.persistence.has_completed_onboarding(person_name)
            logger.info(f"[PERSIST√äNCIA] {person_name}: has_completed={has_completed}")
            return not has_completed
        else:
            # Fallback: usa cache em mem√≥ria (deprecated)
            logger.warning("Persist√™ncia desabilitada - usando cache em mem√≥ria")
            return person_name not in _onboarding_complete

    def is_waiting_onboarding_answer(self, person_name: str) -> bool:
        """
        Verifica se est√° aguardando resposta sobre tutorial.

        Args:
            person_name: Nome do colaborador

        Returns:
            True se estiver aguardando resposta
        """
        is_waiting = _onboarding_state.get(person_name) == 'waiting_initial_answer'
        logger.info(f"[DEBUG] is_waiting_onboarding_answer({person_name}): {is_waiting}, estado: {_onboarding_state.get(person_name)}")
        return is_waiting

    def is_waiting_help_answer(self, person_name: str) -> bool:
        """
        Verifica se est√° aguardando resposta do comando ajuda.

        Args:
            person_name: Nome do colaborador

        Returns:
            True se estiver aguardando resposta
        """
        return _onboarding_state.get(person_name) == 'waiting_help_answer'

    def start_onboarding(self, person_name: str) -> str:
        """
        Inicia processo de onboarding com pergunta inicial.

        Args:
            person_name: Nome do colaborador

        Returns:
            Mensagem de boas-vindas com pergunta
        """
        logger.info(f"Iniciando onboarding para {person_name}")

        # Marcar que est√° aguardando resposta
        _onboarding_state[person_name] = 'waiting_initial_answer'

        logger.info(f"[DEBUG] Estado setado para {person_name}: {_onboarding_state.get(person_name)}")
        logger.info(f"[DEBUG] Estado global: {_onboarding_state}")

        message = f"üëã Ol√°, {person_name}! Sou o Pangeia Bot.\n\n"
        message += "Gerencio suas tarefas do Notion pelo WhatsApp.\n\n"
        message += "Quer um tutorial r√°pido? (sim / n√£o)"

        return message

    def handle_onboarding_response(
        self,
        person_name: str,
        message: str
    ) -> Tuple[bool, str]:
        """
        Processa resposta do usu√°rio sobre tutorial.

        Args:
            person_name: Nome do colaborador
            message: Mensagem recebida

        Returns:
            Tuple (resposta_processada, mensagem_resposta)
        """
        logger.info(f"Processando resposta de onboarding de {person_name}: '{message}'")

        # Normalizar resposta
        response = self.normalize_text(message)

        # Verificar se √© afirmativa
        if any(syn in response for syn in self.YES_SYNONYMS):
            logger.info(f"{person_name} optou pelo tutorial completo")
            self._mark_onboarding_complete(person_name, 'full')
            return True, self._get_full_tutorial()

        # Verificar se √© negativa
        elif any(syn in response for syn in self.NO_SYNONYMS):
            logger.info(f"{person_name} optou pela explica√ß√£o r√°pida")
            self._mark_onboarding_complete(person_name, 'quick')
            return True, self._get_quick_explanation()

        # N√£o entendeu - perguntar novamente
        else:
            logger.info(f"Resposta n√£o reconhecida de {person_name}: '{message}'")
            return False, (
                "N√£o entendi. ü§î\n\n"
                "Voc√™ quer um tutorial r√°pido?\n\n"
                "Responda: *sim* ou *n√£o*"
            )

    def handle_help_response(
        self,
        person_name: str,
        message: str
    ) -> Tuple[bool, str]:
        """
        Processa resposta do comando ajuda (completo/b√°sico).

        Args:
            person_name: Nome do colaborador
            message: Mensagem recebida

        Returns:
            Tuple (resposta_processada, mensagem_resposta)
        """
        logger.info(f"Processando resposta de ajuda de {person_name}: '{message}'")

        # Normalizar resposta
        response = self.normalize_text(message)

        # Verificar se √© completo
        if any(syn in response for syn in self.FULL_SYNONYMS):
            logger.info(f"{person_name} solicitou tutorial completo via ajuda")
            self._clear_state(person_name)
            return True, self._get_full_tutorial()

        # Verificar se √© b√°sico
        elif any(syn in response for syn in self.BASIC_SYNONYMS):
            logger.info(f"{person_name} solicitou explica√ß√£o b√°sica via ajuda")
            self._clear_state(person_name)
            return True, self._get_quick_explanation()

        # N√£o entendeu - perguntar novamente
        else:
            logger.info(f"Resposta de ajuda n√£o reconhecida de {person_name}: '{message}'")
            return False, (
                "N√£o entendi. ü§î\n\n"
                "Voc√™ quer tutorial *completo* ou *b√°sico*?\n\n"
                "Responda: completo ou b√°sico"
            )

    def start_help_flow(self, person_name: str) -> str:
        """
        Inicia fluxo de ajuda com pergunta.

        Args:
            person_name: Nome do colaborador

        Returns:
            Mensagem de ajuda com pergunta
        """
        logger.info(f"Iniciando fluxo de ajuda para {person_name}")

        # Marcar que est√° aguardando resposta
        _onboarding_state[person_name] = 'waiting_help_answer'

        message = "üìñ Posso te ajudar!\n\n"
        message += "Quer um tutorial completo ou s√≥ o b√°sico?\n\n"
        message += "Responda:\n"
        message += "‚Ä¢ *completo* ‚Üí tutorial detalhado\n"
        message += "‚Ä¢ *b√°sico* ‚Üí comandos principais"

        return message

    def _mark_onboarding_complete(self, person_name: str, onboarding_type: str):
        """
        Marca onboarding como completo.

        IMPORTANTE: Agora salva no Notion para persistir entre reinicializa√ß√µes!

        Args:
            person_name: Nome do colaborador
            onboarding_type: 'full' ou 'quick'
        """
        # Mapeia tipo interno para nome amig√°vel
        type_map = {
            'full': 'completo',
            'quick': 'b√°sico'
        }
        notion_type = type_map.get(onboarding_type, onboarding_type)

        # Salvar no Notion (se habilitado)
        if self.persistence.is_enabled():
            success = self.persistence.mark_onboarding_complete(
                person_name=person_name,
                onboarding_type=notion_type
            )
            if success:
                logger.info(f"‚úÖ Onboarding salvo no Notion: {person_name} (tipo: {notion_type})")
            else:
                logger.error(f"‚ùå Erro ao salvar onboarding no Notion para {person_name}")
        else:
            logger.warning(f"Persist√™ncia desabilitada - onboarding de {person_name} n√£o ser√° salvo")

        # Atualizar cache em mem√≥ria (fallback)
        _onboarding_complete.add(person_name)
        _onboarding_state.pop(person_name, None)

        logger.info(f"Onboarding completo para {person_name} (tipo: {onboarding_type})")

    def _clear_state(self, person_name: str):
        """
        Limpa estado de onboarding.

        Args:
            person_name: Nome do colaborador
        """
        _onboarding_state.pop(person_name, None)

    def _get_full_tutorial(self) -> str:
        """
        Retorna tutorial completo.

        Returns:
            Mensagem com tutorial detalhado
        """
        message = "üëã *Pangeia Bot - Tutorial Completo*\n\n"
        message += "Eu gerencio suas tarefas do Notion pelo WhatsApp.\n\n"
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        message += "*üéØ COMO FUNCIONA*\n\n"
        message += "*1Ô∏è‚É£ Digite:* tarefas\n"
        message += "   Voc√™ ver√° sua lista numerada:\n"
        message += "   1Ô∏è‚É£ Reuni√£o com cliente\n"
        message += "   2Ô∏è‚É£ Revisar documento\n"
        message += "   3Ô∏è‚É£ Ligar fornecedor\n\n"
        message += "*2Ô∏è‚É£ Para marcar como feita:*\n"
        message += "   Digite: feito 2\n"
        message += "   (marca a tarefa n√∫mero 2)\n\n"
        message += "*3Ô∏è‚É£ Para marcar v√°rias:*\n"
        message += "   Digite: feito 1 3 5\n"
        message += "   (marca tarefas 1, 3 e 5 de uma vez)\n\n"
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        message += "*üìã COMANDOS DISPON√çVEIS*\n\n"
        message += "*üìå VER TAREFAS*\n"
        message += "‚Ä¢ tarefas ‚Üí lista resumida\n"
        message += "‚Ä¢ ver mais ‚Üí lista completa\n"
        message += "‚Ä¢ progresso ‚Üí relat√≥rio detalhado\n\n"
        message += "*‚úÖ MARCAR COMO CONCLU√çDA*\n"
        message += "‚Ä¢ feito 2 ‚Üí marca tarefa 2\n"
        message += "‚Ä¢ feito 1 3 5 ‚Üí marca m√∫ltiplas\n"
        message += "‚Ä¢ pronto 2 / conclu√≠ 2 ‚Üí sin√¥nimos\n\n"
        message += "*üîµ MARCAR EM ANDAMENTO*\n"
        message += "‚Ä¢ andamento 3 ‚Üí marca tarefa 3\n"
        message += "‚Ä¢ fazendo 2 / comecei 2 ‚Üí sin√¥nimos\n\n"
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        message += "*‚è∞ NOTIFICA√á√ïES AUTOM√ÅTICAS*\n\n"
        message += "Voc√™ receber√° mensagens:\n"
        message += "‚Ä¢ 08:00 ‚Üí Lista de tarefas do dia\n"
        message += "‚Ä¢ 13:30, 15:30, 17:00, 21:00 ‚Üí Check-ins\n\n"
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        message += "*üí° DICAS*\n\n"
        message += "‚Ä¢ Os n√∫meros mudam conforme voc√™ conclui tarefas\n"
        message += "‚Ä¢ Sempre veja 'tarefas' antes de marcar\n"
        message += "‚Ä¢ Tarefas conclu√≠das somem da lista\n\n"
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        message += "*üöÄ Pronto!*\n\n"
        message += "Digite: *tarefas*"

        return message

    def _get_quick_explanation(self) -> str:
        """
        Retorna explica√ß√£o r√°pida.

        Returns:
            Mensagem com comandos b√°sicos
        """
        message = "‚úÖ *Sem problemas!*\n\n"
        message += "*Comandos b√°sicos:*\n"
        message += "‚Ä¢ tarefas ‚Üí ver lista\n"
        message += "‚Ä¢ feito 2 ‚Üí marcar tarefa 2\n"
        message += "‚Ä¢ progresso ‚Üí resumo do dia\n\n"
        message += "Quando precisar: *ajuda*\n\n"
        message += "Vamos come√ßar? Digite: *tarefas*"

        return message


# Inst√¢ncia global
_onboarding_manager = None


def get_onboarding_manager() -> OnboardingManager:
    """
    Retorna inst√¢ncia global do OnboardingManager.

    Returns:
        OnboardingManager singleton
    """
    global _onboarding_manager
    if _onboarding_manager is None:
        _onboarding_manager = OnboardingManager()
    return _onboarding_manager
