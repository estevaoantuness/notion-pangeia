"""
Configura√ß√£o OpenAI - OpenAI Configuration.

Configura√ß√µes para integra√ß√£o com GPT-4o-mini e LLM-based conversational agent.
"""

import os
from typing import Optional

# Model Configuration
GPT_MODEL = os.getenv("GPT_MODEL", "gpt-4o-mini")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")

# Context Windows
MAX_CONTEXT_TOKENS = int(os.getenv("MAX_CONTEXT_TOKENS", "4000"))
MAX_RESPONSE_TOKENS = int(os.getenv("MAX_RESPONSE_TOKENS", "1000"))
RESERVE_TOKENS = int(os.getenv("RESERVE_TOKENS", "500"))

# Temperature e criatividade
TEMPERATURE = float(os.getenv("TEMPERATURE", "0.7"))  # 0.7 para balanced criatividade
TOP_P = float(os.getenv("TOP_P", "0.9"))

# Timeouts
REQUEST_TIMEOUT = int(os.getenv("REQUEST_TIMEOUT", "30"))
CONVERSATION_TIMEOUT = int(os.getenv("CONVERSATION_TIMEOUT", "3600"))  # 1h

# Memory Management
MAX_CONVERSATION_HISTORY = int(os.getenv("MAX_CONVERSATION_HISTORY", "20"))
MAX_MESSAGES_PER_USER = int(os.getenv("MAX_MESSAGES_PER_USER", "50"))
HISTORY_RETENTION_HOURS = int(os.getenv("HISTORY_RETENTION_HOURS", "24"))

# Cost Control
ENABLE_COST_TRACKING = os.getenv("ENABLE_COST_TRACKING", "true").lower() == "true"
MAX_COST_PER_USER_PER_DAY = float(os.getenv("MAX_COST_PER_USER_PER_DAY", "1.0"))  # USD

# System Prompt Templates
SYSTEM_PROMPT_TEMPLATE = """Voc√™ √© o Pangeia Bot, um assistente conversacional humanizado especializado em:

üß† **INTELIG√äNCIA PSICOL√ìGICA:**
- Entrevista Motivacional (OARS): Open questions, Affirming, Reflections, Summaries
- Comunica√ß√£o N√£o-Violenta (OFNR): Observation, Feeling, Need, Request
- Teoria da Autodetermina√ß√£o: Autonomia, Compet√™ncia, Relacionamento
- Detec√ß√£o de burnout e estado emocional

üìä **GEST√ÉO DE TAREFAS:**
- Integra√ß√£o com Notion para rastreamento de tarefas
- An√°lise de progresso e prioriza√ß√£o inteligente
- Recomenda√ß√µes baseadas em capacidade emocional

üí¨ **COMUNICA√á√ÉO:**
- Natural, emp√°tica e sem cobran√ßas
- Personaliz√°vel ao estilo de cada pessoa
- Refor√ßo positivo constante
- Valida√ß√£o emocional antes de tudo

üë§ **CONTEXTO DO USU√ÅRIO:**
Nome: {name}
Estado Emocional: {emotional_state}
N√≠vel de Energia: {energy_level}
Tarefas Ativas: {active_tasks}
Progresso: {progress}

**DIRETRIZES IMPORTANTES:**
1. Sempre valide o sentimento antes de dar orienta√ß√£o
2. N√£o force tarefas - pergunte se √© momento adequado
3. Celebre pequenas vit√≥rias com entusiasmo genu√≠no
4. Se detectar esgotamento, sugira pausa, n√£o mais trabalho
5. Mantenha tom conversacional e amig√°vel
6. Use emojis quando apropriado
7. Adapte linguagem ao estilo da pessoa

**NUNCA:**
- Seja rob√≥tico ou formal demais
- D√™ respostas gen√©ricas
- Ignore sinais emocionais
- Force o usu√°rio a fazer tarefas
- Termine conversa abruptamente

Responda de forma concisa (m√°ximo 3 par√°grafos), natural e emp√°tica."""

# Fallback Responses (quando API cair)
FALLBACK_RESPONSES = {
    "timeout": "Desculpa, estou um pouco lento agora. Tenta de novo em uns segundos? üôè",
    "error": "Opa, algo deu errado da minha parte. Tenta novamente? üíô",
    "overload": "Estou recebendo muitas mensagens agora. Tenta em um minutinho? ‚è≥",
    "unknown": "N√£o entendi bem. Pode reformular? T√¥ aqui pra entender voc√™! üëÇ",
}

# Safety Settings
CONTENT_FILTER_ENABLED = os.getenv("CONTENT_FILTER_ENABLED", "true").lower() == "true"
BLOCKED_KEYWORDS = ["senha", "credit", "card", "ccv"]  # N√£o processar dados sens√≠veis

# Logging
LOG_CONVERSATIONS = os.getenv("LOG_CONVERSATIONS", "true").lower() == "true"
LOG_TOKENS_USED = os.getenv("LOG_TOKENS_USED", "true").lower() == "true"
